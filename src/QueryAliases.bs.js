// Generated by BUCKLESCRIPT VERSION 2.1.0, PLEASE EDIT WITH CARE
'use strict';

var List                 = require("bs-platform/lib/js/list.js");
var $$Array              = require("bs-platform/lib/js/array.js");
var Curry                = require("bs-platform/lib/js/curry.js");
var GraphqlTag           = require("graphql-tag");
var Url$ReactTemplate    = require("./url.bs.js");
var Alias$ReactTemplate  = require("./alias.bs.js");
var Store$ReactTemplate  = require("./Store/Store.bs.js");
var Action$ReactTemplate = require("./Store/Action.bs.js");
var Apollo$ReactTemplate = require("./apollo.bs.js");

function str(prim) {
  return prim;
}

var query = GraphqlTag("\n  query GetAliasesByURL($url: AliasesURLInput) {\n    aliases(url: $url) {\n      error { code, message }\n      aliases { id, name, status }\n    }\n  }\n");

var request = /* `Query */[
  -250086680,
  query
];

function deconstructResponse(response) {
  return /* tuple */[
          response.aliases.aliases,
          response.aliases.error
        ];
}

var Config = /* module */[
  /* request */request,
  /* deconstructResponse */deconstructResponse
];

var Request = Apollo$ReactTemplate.Request(Config);

function run(url) {
  Store$ReactTemplate.dispatch(Action$ReactTemplate.AliasListLoading);
  var variables = /* Some */[{
      url: Url$ReactTemplate.toGql(url)
    }];
  Curry._1(Request[/* send */3], variables).then((function (result) {
          if (result[0] >= 981919598) {
            var lst = List.map(Alias$ReactTemplate.ofGql, $$Array.to_list(result[1]));
            Store$ReactTemplate.dispatch([
                  Action$ReactTemplate.AliasListLoaded,
                  lst
                ]);
          } else {
            var message = Apollo$ReactTemplate.messageOfExn("getting alias list", url, result[1]);
            Store$ReactTemplate.dispatch([
                  Action$ReactTemplate.AliasListLoadingFailed,
                  message
                ]);
          }
          return Promise.resolve(/* () */0);
        }));
  return /* () */0;
}

function reload(url) {
  Store$ReactTemplate.dispatch(Action$ReactTemplate.AliasListLoading);
  Apollo$ReactTemplate.resetStore(/* () */0).then((function () {
            run(url);
            return Promise.resolve(/* () */0);
          })).catch((function (error) {
          var message = "Failed reseting store before reloading alias list.";
          console.log(message, url, error);
          Store$ReactTemplate.dispatch([
                Action$ReactTemplate.AliasListLoadingFailed,
                message
              ]);
          return Promise.resolve(/* () */0);
        }));
  return /* () */0;
}

exports.str     = str;
exports.query   = query;
exports.Config  = Config;
exports.Request = Request;
exports.run     = run;
exports.reload  = reload;
/* query Not a pure module */
