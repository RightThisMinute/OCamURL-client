// Generated by BUCKLESCRIPT VERSION 2.1.0, PLEASE EDIT WITH CARE
'use strict';

var Block             = require("bs-platform/lib/js/block.js");
var Curry             = require("bs-platform/lib/js/curry.js");
var React             = require("react");
var Js_exn            = require("bs-platform/lib/js/js_exn.js");
var $$String          = require("bs-platform/lib/js/string.js");
var ReasonReact       = require("reason-react/src/ReasonReact.js");
var Url$ReactTemplate = require("../url.bs.js");

function str(prim) {
  return prim;
}

function stringOfStatus(param) {
  if (typeof param === "number") {
    return "unset";
  } else if (param[0] >= 144245463) {
    return "invalid";
  } else {
    return "valid";
  }
}

var component = ReasonReact.reducerComponent("LookupInput");

function make(initialValue, onSubmit, _) {
  var checkURL = function (url) {
    var url$1 = $$String.trim(url);
    if (url$1 === "") {
      return /* Unset */974938825;
    } else {
      var exit = 0;
      var url$2;
      try {
        url$2 = Url$ReactTemplate.ofString(url$1);
        exit = 1;
      }
      catch (raw_exn){
        var exn = Js_exn.internalToOCamlException(raw_exn);
        if (exn[0] === Url$ReactTemplate.Scheme[/* UnsupportedScheme */0]) {
          var s = exn[1];
          if (s === "") {
            return /* `Invalid */[
                    144245463,
                    "The URL must start with HTTP or HTTPS."
                  ];
          } else {
            return /* `Invalid */[
                    144245463,
                    "The scheme [" + (String(s) + "] is not supported, only HTTP and HTTPS.")
                  ];
          }
        } else if (exn[0] === Url$ReactTemplate.MissingPart) {
          return /* `Invalid */[
                  144245463,
                  "Missing the " + (String(exn[1]) + " part of the URL.")
                ];
        } else {
          throw exn;
        }
      }
      if (exit === 1) {
        return /* `Valid */[
                -991566628,
                url$2
              ];
      }
      
    }
  };
  var handleSubmit = function (state) {
    var text = $$String.trim(state[/* value */0]);
    console.log("Submitted", text);
    return /* UpdateWithSideEffects */Block.__(3, [
              /* record */[
                /* value */text,
                /* url */state[/* url */1]
              ],
              (function () {
                  return Curry._1(onSubmit, state[/* url */1]);
                })
            ]);
  };
  var change = function ($$event) {
    var el = $$event.target;
    var value = el.value;
    return /* Change */Block.__(0, [
              value,
              checkURL(value)
            ]);
  };
  var keyDown = function ($$event) {
    return /* KeyDown */Block.__(1, [$$event.key]);
  };
  var submit = function () {
    return /* Submit */0;
  };
  var newrecord = component.slice();
  newrecord[/* didMount */4] = (function (param) {
      var url = param[/* state */2][/* url */1];
      return /* SideEffects */Block.__(2, [(function () {
                    return Curry._1(onSubmit, url);
                  })]);
    });
  newrecord[/* render */9] = (function (param) {
      var match = param[/* state */2];
      var reduce = param[/* reduce */1];
      var status = stringOfStatus(match[/* url */1]);
      return React.createElement("section", {
                  className: "lookup-form " + status
                }, React.createElement("label", {
                      htmlFor: "lookup-form-url-input"
                    }, "Enter a URL:"), React.createElement("input", {
                      id: "lookup-form-url-input",
                      autoFocus: true,
                      placeholder: "Paste a URL",
                      type: "url",
                      value: match[/* value */0],
                      onPaste: Curry._1(reduce, submit),
                      onKeyDown: Curry._1(reduce, keyDown),
                      onBlur: Curry._1(reduce, submit),
                      onChange: Curry._1(reduce, change)
                    }));
    });
  newrecord[/* initialState */10] = (function () {
      return /* record */[
              /* value */$$String.trim(initialValue),
              /* url */checkURL(initialValue)
            ];
    });
  newrecord[/* reducer */12] = (function (action, state) {
      if (typeof action === "number") {
        return handleSubmit(state);
      } else if (action.tag) {
        if (action[0] === "Enter") {
          return handleSubmit(state);
        } else {
          return /* NoUpdate */0;
        }
      } else {
        return /* Update */Block.__(0, [/* record */[
                    /* value */action[0],
                    /* url */action[1]
                  ]]);
      }
    });
  return newrecord;
}

exports.str            = str;
exports.stringOfStatus = stringOfStatus;
exports.component      = component;
exports.make           = make;
/* component Not a pure module */
