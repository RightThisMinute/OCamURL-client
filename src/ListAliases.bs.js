// Generated by BUCKLESCRIPT VERSION 2.1.0, PLEASE EDIT WITH CARE
'use strict';

var $$Array                    = require("bs-platform/lib/js/array.js");
var Block                      = require("bs-platform/lib/js/block.js");
var Curry                      = require("bs-platform/lib/js/curry.js");
var React                      = require("react");
var Pervasives                 = require("bs-platform/lib/js/pervasives.js");
var ReasonReact                = require("reason-react/src/ReasonReact.js");
var Alias$ReactTemplate        = require("./alias.bs.js");
var JsOpt$ReactTemplate        = require("./JsOpt.bs.js");
var AliasWidget$ReactTemplate  = require("./AliasWidget.bs.js");
var QueryAliases$ReactTemplate = require("./QueryAliases.bs.js");

function str(prim) {
  return prim;
}

var component = ReasonReact.reducerComponent("QueryAliases");

function make(url, _) {
  var newrecord = component.slice();
  newrecord[/* didMount */4] = (function () {
      return /* SideEffects */Block.__(2, [(function (param) {
                    var url$1 = url;
                    var reduce = param[/* reduce */1];
                    QueryAliases$ReactTemplate.run(url$1).then((function (response) {
                              var maybePayload = response.aliases;
                              if (JsOpt$ReactTemplate.notNull(maybePayload.error)) {
                                var error = JsOpt$ReactTemplate.value(maybePayload.error);
                                Curry._2(reduce, (function () {
                                        return /* Error */Block.__(0, ["Failed loading:  [" + (error.code + ("] " + error.message))]);
                                      }), /* () */0);
                              } else if (JsOpt$ReactTemplate.isNull(maybePayload.aliases)) {
                                Curry._2(reduce, (function () {
                                        return /* Error */Block.__(0, ["Failed loading alias list. Dunno why."]);
                                      }), /* () */0);
                              } else {
                                var lst = JsOpt$ReactTemplate.value(maybePayload.aliases).map(Alias$ReactTemplate.ofGql);
                                Curry._2(reduce, (function () {
                                        return /* Loaded */Block.__(1, [lst]);
                                      }), /* () */0);
                              }
                              return Promise.resolve(/* () */0);
                            })).catch((function (error) {
                            console.log("Failed loading alias list for URL.", url$1, error);
                            Curry._2(reduce, (function () {
                                    return /* Error */Block.__(0, ["Failed loading alias list. See console."]);
                                  }), /* () */0);
                            return Promise.resolve(/* () */0);
                          }));
                    return /* () */0;
                  })]);
    });
  newrecord[/* render */9] = (function (param) {
      var match = param[/* state */2];
      var list = match[/* list */1];
      var status = match[/* status */0];
      var body = typeof status === "number" ? (
          status !== 0 ? (
              list.length !== 0 ? $$Array.map((function (a) {
                        return ReasonReact.element(/* Some */[Pervasives.string_of_int(Alias$ReactTemplate.id(a))], /* None */0, AliasWidget$ReactTemplate.make(a, /* array */[]));
                      }), list) : React.createElement("p", {
                      className: "status empty"
                    }, "No aliases.")
            ) : React.createElement("p", {
                  className: "status loading"
                }, "Loading...")
        ) : React.createElement("p", {
              className: "status failure"
            }, status[0]);
      return React.createElement("section", {
                  className: "list"
                }, body);
    });
  newrecord[/* initialState */10] = (function () {
      return /* record */[
              /* status : Loading */0,
              /* list : array */[]
            ];
    });
  newrecord[/* reducer */12] = (function (action, _) {
      if (action.tag) {
        return /* Update */Block.__(0, [/* record */[
                    /* status : Success */1,
                    /* list */action[0]
                  ]]);
      } else {
        return /* Update */Block.__(0, [/* record */[
                    /* status : Failed */[action[0]],
                    /* list : array */[]
                  ]]);
      }
    });
  return newrecord;
}

exports.str       = str;
exports.component = component;
exports.make      = make;
/* component Not a pure module */
