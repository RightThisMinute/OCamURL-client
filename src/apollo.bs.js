// Generated by BUCKLESCRIPT VERSION 2.1.0, PLEASE EDIT WITH CARE
'use strict';

var ApolloClient    = require("reason-apollo/src/ApolloClient.js");
var ReasonApollo    = require("reason-apollo/src/ReasonApollo.js");
var Caml_exceptions = require("bs-platform/lib/js/caml_exceptions.js");

var Client = ReasonApollo.Create(/* module */[/* uri */"http://mgmt.ocamurl.dev/graphql"]);

function Query() {
  var CastApolloClient = ApolloClient.Cast(/* module */[]);
  var apolloClient = Client[/* apolloClient */2];
  var SendFailure = Caml_exceptions.create("Apollo-ReactTemplate.Query(ClientConfig).SendFailure");
  var send = function (typ, query, variables) {
    return new Promise((function (resolve, reject) {
                  var requestPromise;
                  if (typ >= 1035765577) {
                    var tmp = {
                      mutation: query
                    };
                    if (variables) {
                      tmp.variables = variables[0];
                    }
                    var conf = tmp;
                    requestPromise = apolloClient.mutate(conf);
                  } else {
                    var tmp$1 = {
                      query: query
                    };
                    if (variables) {
                      tmp$1.variables = variables[0];
                    }
                    var conf$1 = tmp$1;
                    requestPromise = apolloClient.query(conf$1);
                  }
                  Promise.resolve(requestPromise).then((function (result) {
                            var typedResult = result.data;
                            resolve(typedResult);
                            return Promise.resolve(/* () */0);
                          })).catch((function (error) {
                          reject([
                                SendFailure,
                                error,
                                query,
                                variables
                              ]);
                          return Promise.resolve(/* () */0);
                        }));
                  return /* () */0;
                }));
  };
  return /* module */[
          /* CastApolloClient */CastApolloClient,
          /* apolloClient */apolloClient,
          /* SendFailure */SendFailure,
          /* send */send
        ];
}

exports.Client = Client;
exports.Query  = Query;
/* Client Not a pure module */
