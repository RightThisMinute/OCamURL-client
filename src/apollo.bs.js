// Generated by BUCKLESCRIPT VERSION 2.1.0, PLEASE EDIT WITH CARE
'use strict';

var Curry                = require("bs-platform/lib/js/curry.js");
var ApolloLinks          = require("reason-apollo/src/ApolloLinks.bs.js");
var ApolloLink           = require("apollo-link");
var GraphqlTag           = require("graphql-tag");
var ReasonApollo         = require("reason-apollo/src/ReasonApollo.bs.js");
var Caml_exceptions      = require("bs-platform/lib/js/caml_exceptions.js");
var ApolloInMemoryCache  = require("reason-apollo/src/ApolloInMemoryCache.bs.js");
var Config$ReactTemplate = require("./Config.bs.js");

var httpLink = ApolloLinks.createHttpLink(Config$ReactTemplate.graphqlURI, /* None */0, /* None */0, /* None */0, /* None */0, /* None */0, /* () */0);

function makeAuthLink(auth) {
  return ApolloLinks.createContextLink((function () {
                return {
                        headers: {
                          authorization: auth
                        }
                      };
              }));
}

var inMemoryCache = ApolloInMemoryCache.createInMemoryCache(/* Some */[(function (obj) {
          return obj.id;
        })], /* () */0);

var links = Config$ReactTemplate.graphqlAuthHeader ? /* array */[
    makeAuthLink(Config$ReactTemplate.graphqlAuthHeader[0]),
    httpLink
  ] : /* array */[httpLink];

var apolloClient = ReasonApollo.createApolloClient(inMemoryCache, ApolloLink.from(links), /* None */0, /* None */0, /* None */0, /* None */0, /* () */0);

var Client = ReasonApollo.CreateClient(/* module */[/* apolloClient */apolloClient]);

function resetStore() {
  return Client[/* apolloClient */0].resetStore();
}

var ResponseError = Caml_exceptions.create("Apollo-ReactTemplate.ResponseError");

function Request(Conf) {
  var gqlQueryOfRequest = function (param) {
    return param[1];
  };
  var SendFailure = Caml_exceptions.create("Apollo-ReactTemplate.Request(Conf).SendFailure");
  var send = function (request) {
    var requestPromise;
    if (request[0] >= 1035765577) {
      var mutation = request[1];
      requestPromise = Client[/* apolloClient */0].mutate({
            mutation: GraphqlTag(mutation.query),
            variables: mutation.variables
          });
    } else {
      var query = request[1];
      requestPromise = Client[/* apolloClient */0].query({
            query: GraphqlTag(query.query),
            variables: query.variables
          });
    }
    var gqlQuery = request[1];
    return new Promise((function (resolve, _) {
                  Promise.resolve(requestPromise).then((function (result) {
                            var typedResult = Curry._1(gqlQuery.parse, result.data);
                            var match = Curry._1(Conf[/* deconstructResponse */0], typedResult);
                            var error = match[1];
                            var payload = match[0];
                            if (error) {
                              var error$1 = error[0];
                              resolve(/* `Exn */[
                                    3458171,
                                    [
                                      ResponseError,
                                      error$1.code,
                                      error$1.message
                                    ]
                                  ]);
                            } else if (payload) {
                              resolve(/* `Payload */[
                                    981919598,
                                    payload[0]
                                  ]);
                            } else {
                              resolve(/* `Exn */[
                                    3458171,
                                    [
                                      ResponseError,
                                      /* InternalServerError */-493013592,
                                      "Payload and error are null."
                                    ]
                                  ]);
                            }
                            return Promise.resolve(/* () */0);
                          })).catch((function (error) {
                          resolve(/* `Exn */[
                                3458171,
                                [
                                  SendFailure,
                                  error,
                                  gqlQuery
                                ]
                              ]);
                          return Promise.resolve(/* () */0);
                        }));
                  return /* () */0;
                }));
  };
  return /* module */[
          /* gqlQueryOfRequest */gqlQueryOfRequest,
          /* SendFailure */SendFailure,
          /* send */send
        ];
}

function messageOfExn(failedAction, id, exn) {
  var prefix = "Failed " + failedAction;
  if (exn[0] === ResponseError) {
    return prefix + (": " + exn[2]);
  } else {
    console.log(prefix, id, exn);
    return prefix + ". See console.";
  }
}

exports.httpLink      = httpLink;
exports.makeAuthLink  = makeAuthLink;
exports.inMemoryCache = inMemoryCache;
exports.Client        = Client;
exports.resetStore    = resetStore;
exports.ResponseError = ResponseError;
exports.Request       = Request;
exports.messageOfExn  = messageOfExn;
/* httpLink Not a pure module */
