// Generated by BUCKLESCRIPT VERSION 2.1.0, PLEASE EDIT WITH CARE
'use strict';

var $$String        = require("bs-platform/lib/js/string.js");
var Caml_format     = require("bs-platform/lib/js/caml_format.js");
var Caml_exceptions = require("bs-platform/lib/js/caml_exceptions.js");

var InvalidStatus = Caml_exceptions.create("Alias-ReactTemplate.Status.InvalidStatus");

function ofString(s) {
  var match = $$String.lowercase(s);
  switch (match) {
    case "disabled" : 
        return /* Disabled */-709493348;
    case "enabled" : 
        return /* Enabled */-880661407;
    default:
      throw [
            InvalidStatus,
            s
          ];
  }
}

function toString(param) {
  if (param >= -709493348) {
    return "disabled";
  } else {
    return "enabled";
  }
}

var Status = /* module */[
  /* InvalidStatus */InvalidStatus,
  /* ofString */ofString,
  /* toString */toString
];

function id(t) {
  return t[/* id */0];
}

function name(t) {
  return t[/* name */1];
}

function status(t) {
  return t[/* status */2];
}

function statusAsString(t) {
  return toString(t[/* status */2]);
}

function ofGql(g) {
  return /* record */[
          /* id */Caml_format.caml_int_of_string(g.id),
          /* name */g.name,
          /* status */g.status
        ];
}

exports.Status         = Status;
exports.id             = id;
exports.name           = name;
exports.status         = status;
exports.statusAsString = statusAsString;
exports.ofGql          = ofGql;
/* No side effect */
